@* AddExpense.razor *@
@using MudBlazor
@using BlazorApp1.Models
@using BlazorApp1.Pages.Tracker.PettyCash.UploadImage
@inject NavigationManager Nav
@inject IConfiguration Config

<MudPaper Class="pa-4">

    <MudForm @ref="form"
             @bind-IsValid="isValid"
             @bind-Errors="errors">

        <MudText Typo="Typo.h6" Class="mb-4">
            @(IsEditing ? "ویرایش هزینه" : "افزودن هزینه")
        </MudText>

        <!-- تاریخ -->
        <MudDatePicker T="DateTime?"
                       Label="تاریخ"
                       @bind-Date="_date"
                       Required="true"
                       RequiredError="تاریخ را وارد کنید!" />

        <!-- شرح هزینه -->
        <MudTextField T="string"
                      Label="شرح هزینه"
                      @bind-Value="Model.Description"
                      Required="true"
                      RequiredError="شرح الزامی است!" />

        <!-- مبلغ -->
        <MudNumericField T="long"
                         Label="مبلغ (تومان)"
                         @bind-Value="Model.Amount"
                         Required="true"
                         RequiredError="مبلغ الزامی است!"
                         Adornment="Adornment.Start"
                         AdornmentText="﷼" />

        <!-- آپلود رسید -->
        <UploadImage Value="@DisplayReceiptUrl"
                     OnChanged="HandleImageChanged" />

        <!-- دکمه‌ها -->

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="@Loading"
                       OnClick="SaveClicked">
                @(IsEditing ? "ذخیره تغییرات" : "ثبت هزینه")
            </MudButton>

        <MudStack Direction="Row" Spacing="2" Class="mt-4">
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       Disabled="@Loading"
                       OnClick="CancelClicked">
                انصراف
            </MudButton>
        </MudStack>

        @if (errors.Length > 0)
        {
            <MudText Typo="Typo.subtitle2" Class="mt-3">خطاها:</MudText>
            @foreach (var err in errors)
            {
                <MudText Color="Color.Error">@err</MudText>
            }
        }
    </MudForm>

</MudPaper>

@code {
    /* ---------- پارامترها ---------- */
    [Parameter] public CreateExpenseDto Model { get; set; } = new();
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public bool Loading { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<CreateExpenseDto> OnSaved { get; set; }
    [Parameter] public EventCallback<CreateExpenseDto> OnSubmit { get; set; }   // سازگاری

    /* ---------- State ---------- */
    private MudForm? form;
    private bool isValid;
    private string[] errors = { };
    private DateTime? _date;                                 // تاریخ فرم

    /* ---------- مقداردهی ---------- */
    protected override void OnParametersSet()
    {
        // تاریخ DTO (رشته) → DateTime? برای DatePicker
        if (DateTime.TryParse(Model.Date, out var parsed))
            _date = parsed;
        else
            _date = DateTime.Today;              // پیش‌فرض امروز
    }

    /* ---------- تغییر تصویر ---------- */
    private void HandleImageChanged(string? url) => Model.ReceiptUrl = url;

    /* ---------- ثبت ---------- */
    private async Task SaveClicked()
    {
        await form!.Validate();
        if (!form.IsValid) return;

        // DateTime? → رشته با فرمت yyyy-MM-dd
        Model.Date = (_date ?? DateTime.Today).ToString("yyyy-MM-dd");

        // یک بار فراخوانی رویداد
        if (OnSubmit.HasDelegate)
            await OnSubmit.InvokeAsync(Model);
        else
            await OnSaved.InvokeAsync(Model);
    }

    /* ---------- انصراف ---------- */
    private async Task CancelClicked()
    {
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync();
    }

    /* ---------- Url کامل برای نمایش تصویر ---------- */
    private string? DisplayReceiptUrl => BuildAbsoluteUrl(Model.ReceiptUrl);

    private string? BuildAbsoluteUrl(string? url)
    {
        if (string.IsNullOrWhiteSpace(url))
            return null;

        if (url.StartsWith("http", StringComparison.OrdinalIgnoreCase) ||
            url.StartsWith("data:", StringComparison.OrdinalIgnoreCase))
            return url;

        var apiBase = Config["ApiBase"];
        if (string.IsNullOrWhiteSpace(apiBase))
            apiBase = Nav.BaseUri;

        return $"{apiBase.TrimEnd('/')}{url}";
    }
}
