@page "/ActivityPage"

@using BlazorApp1.Models
@using BlazorApp1.Services.Interfaces
@using BlazorApp1.Services.State
@using MudBlazor
@using BlazorApp1.Components.TrackerWidgets

@inject IApiService ApiService
@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@inject ActivityState ActivityState

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-12">
    <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary" Class="mb-8">
        لیست فعالیت‌ها
    </MudText>

    <!-- فرم افزودن فعالیت -->
    <MudPaper Class="p-4 mb-8">
        <MudGrid GutterSpacing="3" AlignItems="AlignItems.Center">
            <MudItem xs="12" md="6">
                <MudTextField T="string"
                              @bind-Value="newTitle"
                              Label="عنوان فعالیت"
                              Variant="Variant.Outlined"
                              FullWidth="true"
                              InputClass="text-end"
                              Immediate="true"
                              Error="@showTitleError"
                              ErrorText="عنوان الزامی است" />
            </MudItem>
            <MudItem xs="6" md="3">
                <MudTextField T="string"
                              @bind-Value="newTime"
                              Placeholder="00:00:00"
                              Variant="Variant.Outlined"
                              Label="مدت زمان"
                              FullWidth="true"
                              InputClass="text-center" />
            </MudItem>
            <MudItem xs="6" md="3" Class="d-flex align-items-center">
                <MudButton Color="Color.Primary"
                           Variant="Variant.Outlined"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="AddActivity"
                           Size="Size.Small"
                           Class="w-100 px-0 py-1 rounded-3">
                    افزودن
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (loading)
    {
        <MudProgressCircular Indeterminate="true"
                             Color="Color.Primary"
                             Class="d-block mx-auto my-10" />
    }
    else
    {
        <MudPaper Elevation="1">
            <ActivityTable Items="activities"
                           OnEdit="OpenEditModal"
                           OnDelete="OpenDelete"
                           OnDetails="NavigateToTracker"
                           ShowDetailsIcon="true" />
        </MudPaper>
    }
</MudContainer>

<!-- دیالوگ ویرایش فعالیت -->
<MudDialog @bind-Visible="editOpen" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">ویرایش فعالیت</MudText>
        <MudTextField T="string"
                      @bind-Value="editTitle"
                      Label="عنوان جدید"
                      Variant="Variant.Outlined"
                      Immediate="true"
                      Error="@editShowTitleError"
                      ErrorText="عنوان الزامی است" />
        <MudTextField T="string"
                      @bind-Value="editTime"
                      Placeholder="00:00:00"
                      Variant="Variant.Outlined"
                      Label="مدت زمان"
                      Immediate="true"
                      InputClass="text-center" />
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Default"
                   Variant="Variant.Text"
                   Size="Size.Small"
                   OnClick="() => editOpen = false">
            لغو
        </MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   Size="Size.Small"
                   OnClick="SaveEdit">
            ذخیره
        </MudButton>
    </DialogActions>
</MudDialog>

<!-- دیالوگ حذف -->
<ConfirmDialog @bind-Open="deleteOpen"
               Message="آیا مطمئن هستید که این فعالیت حذف شود؟"
               ConfirmText="حذف"
               ConfirmColor="Color.Error"
               OnConfirm="DeleteActivity" />

@code {
    private List<ActivityDto> activities = new();
    private string newTitle = "";
    private string newTime = "00:00:00";
    private bool showTitleError = false;
    private bool loading = true;

    private bool editOpen;
    private int editId;
    private string editTitle = "";
    private string editTime = "00:00:00";
    private bool editShowTitleError = false;

    private bool deleteOpen;
    private int deleteId;

    protected override async Task OnInitializedAsync() => await LoadActivities();

    private async Task LoadActivities()
    {
        loading = true;
        try
        {
            activities = await ApiService.GetActivitiesAsync();
        }
        catch
        {
            Snackbar.Add("خطا در دریافت لیست فعالیت‌ها", Severity.Error);
        }
        loading = false;
    }

    private async Task AddActivity()
    {
        showTitleError = string.IsNullOrWhiteSpace(newTitle);
        if (showTitleError)
        {
            Snackbar.Add("عنوان را وارد کنید", Severity.Error);
            return;
        }
        if (!TimeSpan.TryParse(newTime, out var ts))
        {
            Snackbar.Add("زمان نامعتبر است", Severity.Error);
            return;
        }
        var dto = new ActivityDto
            {
                Title = newTitle.Trim(),
                TotalSeconds = (int)ts.TotalSeconds
            };
        var ok = await ApiService.CreateActivityAsync(dto);
        Snackbar.Add(ok ? "فعالیت افزوده شد" : "خطا در افزودن",
                     ok ? Severity.Success : Severity.Error);
        if (ok) await LoadActivities();
        newTitle = ""; newTime = "00:00:00"; showTitleError = false;
    }

    private void OpenEditModal(ActivityDto act)
    {
        editId = act.Id;
        editTitle = act.Title;
        editTime = FormatTime(act.TotalSeconds);
        editShowTitleError = false;
        editOpen = true;
    }

    private async Task SaveEdit()
    {
        editShowTitleError = string.IsNullOrWhiteSpace(editTitle);
        if (editShowTitleError)
        {
            Snackbar.Add("عنوان نمی‌تواند خالی باشد", Severity.Error);
            return;
        }
        if (!TimeSpan.TryParse(editTime, out var ts))
        {
            Snackbar.Add("زمان نامعتبر است", Severity.Error);
            return;
        }
        var dto = new ActivityDto
            {
                Id = editId,
                Title = editTitle.Trim(),
                TotalSeconds = (int)ts.TotalSeconds
            };
        var ok = await ApiService.UpdateActivityAsync(editId, dto);
        Snackbar.Add(ok ? "ویرایش شد" : "خطا در ویرایش",
                     ok ? Severity.Success : Severity.Error);
        if (ok)
        {
            var itm = activities.FirstOrDefault(a => a.Id == editId);
            if (itm != null) { itm.Title = dto.Title; itm.TotalSeconds = dto.TotalSeconds; }
        }
        editOpen = false;
    }

    private void OpenDelete(int id) { deleteId = id; deleteOpen = true; }

    private async Task DeleteActivity()
    {
        var ok = await ApiService.DeleteActivityAsync(deleteId);
        Snackbar.Add(ok ? "حذف شد" : "خطا در حذف",
                     ok ? Severity.Success : Severity.Error);
        if (ok) activities.RemoveAll(a => a.Id == deleteId);
        deleteOpen = false;
    }

    private Task NavigateToTracker(int id)
    {
        var sel = activities.FirstOrDefault(a => a.Id == id);
        if (sel != null) ActivityState.SetActivity(sel);
        NavManager.NavigateTo($"/tracker/{id}");
        return Task.CompletedTask;
    }

    private static string FormatTime(int seconds)
      => TimeSpan.FromSeconds(seconds).ToString(@"hh\:mm\:ss");
}
