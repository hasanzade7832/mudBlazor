@using BlazorApp1.Models.TaskManagement
@inject IAdminService AdminService

<link href="css/MyTasks/MyTaskCard.css" rel="stylesheet" />

<MudCard Class="@CardClass" Elevation="2">
    <!-- بج‌ها بالا کارت -->
    <div class="mytask-badges-top">
        <div class="badge-floating badge-floating-left">
            <MudChip T="string"
                     Color="@RemainBadgeColor"
                     Variant="Variant.Filled"
                     Size="Size.Large"
                     Class="badge-chip-top">
                @RemainBadgeText
            </MudChip>
        </div>
        <div class="badge-floating badge-floating-right">
            <MudChip T="string"
                     Color="@StatusBadgeColor"
                     Variant="Variant.Filled"
                     Size="Size.Large"
                     Class="@StatusChipTopClass">
                @StatusBadgeText
                @if (UserTask?.IsCompletedByUser == true && !(UserTask?.IsConfirmedByAdmin ?? false))
                {
                    <span class="dot-pulse"></span>
                }
            </MudChip>
        </div>
    </div>

    <MudCardContent>
        <div class="mytask-header">
            <div class="mytask-header-info">
                <MudText Typo="Typo.h6" Class="mytask-title">
                    <div class="mytask-title-scroll">@TaskTitle</div>
                </MudText>
                @if (!string.IsNullOrWhiteSpace(TaskDescription))
                {
                    <MudText Typo="Typo.body2" Class="mytask-desc">
                        <div class="mytask-desc-scroll">@TaskDescription</div>
                    </MudText>
                }
            </div>
        </div>
        <div class="mytask-actions">
            <MudSlider T="int"
                       Dir="Direction.LeftToRight"
                       Min="0"
                       Max="100"
                       Step="5"
                       Value="@Percent"
                       Disabled="@(!CanEdit)"
                       ValueChanged="@(v => OnPercentChanged(v))"
                       Immediate="true"
                       Color="Color.Primary"
                       Class="mytask-slider" />
            <div class="mytask-percent">@Percent %</div>
            <MudButton Variant="Variant.Filled"
                       Disabled="@(!CanSave)"
                       OnClick="@SaveProgress"
                       Color="Color.Primary"
                       Class="mytask-save-btn">
                ثبت
            </MudButton>
        </div>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public UserTaskDto? UserTask { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }

    private int draftPercent;

    protected override void OnInitialized()
    {
        draftPercent = UserTask?.PercentComplete ?? 0;
    }

    private int Percent
    {
        get => draftPercent;
        set
        {
            if (draftPercent != value)
            {
                draftPercent = value;
                StateHasChanged();
            }
        }
    }

    private string TaskTitle => UserTask?.TaskItem?.Title ?? "(بدون عنوان)";
    private string TaskDescription => UserTask?.TaskItem?.Description ?? "";
    private DateTime TaskDeadline => UserTask?.TaskItem?.Deadline ?? DateTime.Now;
    private DateTime TaskCreatedAt => UserTask?.TaskItem?.CreatedAt ?? DateTime.Now;

    private bool CanSave => Percent != (UserTask?.PercentComplete ?? 0)
                            && !(UserTask?.IsConfirmedByAdmin ?? true)
                            && !IsDeadlinePassed;
    private bool CanEdit => !(UserTask?.IsConfirmedByAdmin ?? true) && !IsDeadlinePassed;
    private bool IsDeadlinePassed => TaskDeadline < DateTime.Now;

    private string RemainBadgeText
    {
        get
        {
            var rem = (TaskDeadline - DateTime.Now).TotalDays;
            if (rem <= 0) return "مهلت تمام";
            return $"{Math.Ceiling(rem)} روز مانده";
        }
    }
    private Color RemainBadgeColor
    {
        get
        {
            var rem = (TaskDeadline - DateTime.Now).TotalDays;
            var total = (TaskDeadline - TaskCreatedAt).TotalDays;
            var pct = total > 0 ? ((total - rem) / total) * 100 : 100;
            if (pct >= 80) return Color.Error;
            if (pct >= 30) return Color.Warning;
            return Color.Success;
        }
    }
    private string StatusBadgeText
    {
        get
        {
            if (UserTask?.IsConfirmedByAdmin == true) return "تأیید شد";
            if (UserTask?.IsCompletedByUser == true) return "در انتظار تأیید";
            return "در حال انجام";
        }
    }
    private Color StatusBadgeColor
    {
        get
        {
            if (UserTask?.IsConfirmedByAdmin == true) return Color.Success;
            if (UserTask?.IsCompletedByUser == true) return Color.Warning;
            return Color.Info;
        }
    }

    // فقط یک متغیر رشته نهایی به جای ترکیب مستقیم در Class
    private string StatusChipTopClass =>
        $"badge-chip-top{(UserTask?.IsCompletedByUser == true && !(UserTask?.IsConfirmedByAdmin ?? false) ? " pulse-badge" : "")}";

    // حالت کارت: اگه تایید شده کل کارت سبز شود
    private string CardClass
    {
        get
        {
            if (UserTask?.IsConfirmedByAdmin == true)
                return "mytask-card mx-auto completed";
            if (IsDeadlinePassed)
                return "mytask-card mx-auto expired";
            return "mytask-card mx-auto";
        }
    }

    private Task OnPercentChanged(int v)
    {
        Percent = v;
        return Task.CompletedTask;
    }

    private async Task SaveProgress()
    {
        if (UserTask == null) return;
        var dto = new CompleteTaskDto { PercentComplete = Percent };
        var ok = await AdminService.CompleteTaskAsync(UserTask.Id, dto);
        if (ok && OnSaved.HasDelegate)
            await OnSaved.InvokeAsync();
    }
}
