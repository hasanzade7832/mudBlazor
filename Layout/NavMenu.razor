@* KargardoonAppBar.razor *@
@using MudBlazor
@using System.Text.Json
@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject BlazorApp1.Services.SignalRService SignalRService

<MudAppBar Class="dark-appbar" Elevation="0">

    <!-- لوگو و نام اپ -->
    <MudText Typo="Typo.h6" Class="brand">
        Kargardoon
    </MudText>

    <!-- منوی افقی (در دسکتاپ) -->
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <nav class="nav-center">
            @foreach (var item in MenuItems)
            {
                if (!item.Show) continue;
                var active = IsActive(item.Href);

                <MudButton Class="@GetBtnClass(active)"
                           Href="@item.Href"
                           EndIcon="@item.Icon"
                           DisableRipple="true">
                    @item.Text
                </MudButton>
            }
        </nav>
    </MudHidden>

    <MudSpacer />

    <!-- منوی کاربری -->
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudMenu Class="user-menu"
                 AnchorOrigin="Origin.BottomCenter"
                 TransformOrigin="Origin.TopCenter">
            <ActivatorContent>
                <MudButton DisableRipple="true" Class="user-btn">
                    <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Class="account-icon" />
                    <span class="username">@UserNameLocal</span>
                    <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" />
                </MudButton>
            </ActivatorContent>
            <ChildContent>
                @if (IsAdminLocal)
                {
                    <MudMenuItem OnClick="GoToAdminPanel" Class="user-menu-item profile-link">
                        پنل ادمین
                    </MudMenuItem>
                }
                else
                {
                    <MudMenuItem OnClick="GoToProfile" Class="user-menu-item profile-link">
                        پروفایل کاربری
                    </MudMenuItem>
                }
                <MudMenuItem OnClick="Logout" Class="user-menu-item exit">
                    خروج
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </MudHidden>

    <!-- منوی همبرگری (در موبایل و تبلت) -->
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudMenu Icon="@Icons.Material.Filled.Menu"
                 Dense="true"
                 Class="burger-menu">
            @foreach (var item in MenuItems)
            {
                if (!item.Show) continue;
                <MudMenuItem Href="@item.Href" Class="burger-item">@item.Text</MudMenuItem>
            }
            <MudDivider />
            @if (IsAdminLocal)
            {
                <MudMenuItem OnClick="GoToAdminPanel" Class="burger-item profile-link">پنل ادمین</MudMenuItem>
            }
            else
            {
                <MudMenuItem OnClick="GoToProfile" Class="burger-item profile-link">پروفایل کاربری</MudMenuItem>
            }
            <MudMenuItem OnClick="Logout" Class="burger-item exit">خروج</MudMenuItem>
        </MudMenu>
    </MudHidden>

</MudAppBar>

@code {
    // وضعیت کاربر
    private bool IsAdminLocal;
    private string UserNameLocal = "کاربر";

    // آیتم‌های منو
    private readonly record struct MenuItem(string Href, string Text, string Icon, bool Show = true);

    private IEnumerable<MenuItem> MenuItems => new[] {
        // new MenuItem("/Egg",        "تخم‌مرغ‌ها",    Icons.Material.Filled.BreakfastDining),
        // new MenuItem("/Internet",   "هزینه اینترنت", Icons.Material.Filled.Public),
        new MenuItem("/PettyCash",  "تنخواه",        Icons.Material.Filled.CreditCard, IsAdminLocal),
        new MenuItem("/TaskLog",    "تایم‌ترکر",     Icons.Material.Filled.AccessTime),
        new MenuItem("/MyTasks",    "تسک‌های من",    Icons.Material.Filled.ListAlt),
        new MenuItem("/Attendance", "حضور",          Icons.Material.Filled.Schedule),
        // new MenuItem("/home",       "خانه",          Icons.Material.Filled.Home)
    };

    protected override async Task OnInitializedAsync()
    {
        NavManager.LocationChanged += async (_, __) => await LoadUser();
        await LoadUser();
    }

    private static string GetBtnClass(bool active) =>
        active ? "nav-btn active" : "nav-btn";

    private bool IsActive(string href)
    {
        var rel = NavManager.ToBaseRelativePath(NavManager.Uri).Trim('/');
        return href.Trim('/').Equals(rel, StringComparison.OrdinalIgnoreCase);
    }

    private async Task LoadUser()
    {
        var json = await JS.InvokeAsync<string>("localStorage.getItem", "user");
        if (string.IsNullOrEmpty(json))
        {
            var rel = NavManager.ToBaseRelativePath(NavManager.Uri).Trim('/').ToLowerInvariant();
            if (rel is not ("login" or "signup"))
                NavManager.NavigateTo("/login");
            return;
        }

        var u = JsonSerializer.Deserialize<LocalUser>(json,
            new JsonSerializerOptions { PropertyNameCaseInsensitive = true })!;

        UserNameLocal = u.UserName ?? UserNameLocal;
        IsAdminLocal = string.Equals(u.Role, "Admin", StringComparison.OrdinalIgnoreCase);

        StateHasChanged();
    }

    private void GoToProfile() => NavManager.NavigateTo("/profile");
    private void GoToAdminPanel() => NavManager.NavigateTo("/admin");
    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "user");
        await JS.InvokeVoidAsync("localStorage.removeItem", "token");
        await SignalRService.StopConnectionAsync();
        NavManager.NavigateTo("/login");
    }

    private sealed class LocalUser
    {
        public string? UserName { get; set; }
        public string? Role { get; set; }
    }
}
