@typeparam TItem
@using MudBlazor

<div class="dynamic-table-wrapper">
    <div class="dynamic-table-scroll-inner">
        <div class="dynamic-table-scroll-vertical">
            <MudTable T="TItem"
                      Items="Items"
                      Hover="true"
                      Dense="true"
                      StickyHeader="true"
                      Breakpoint="Breakpoint.None"
                      Class="dynamic-table glass-table-no-bg">
                <HeaderContent>
                    @foreach (var col in Columns)
                    {
                        var thClass = col.Key == "todayTasks"
                        ? "header-cell-small"
                        : "header-cell-large";
                        <MudTh Align="Center" Class="@thClass">
                            @col.Title
                        </MudTh>
                    }
                </HeaderContent>
                <RowTemplate>
                    @foreach (var col in Columns)
                    {
                        var tdClass = col.Key == "todayTasks"
                        ? "body-cell-small"
                        : "body-cell-large";
                        <MudTd Align="Center" Class="@tdClass">
                            @if (col.Template is not null)
                            {
                                @col.Template(context)
                            }
                            else
                            {
                                @(context?.GetType().GetProperty(col.Key)?.GetValue(context))
                            }
                        </MudTd>
                    }
                </RowTemplate>
            </MudTable>
        </div>
    </div>
</div>

@code {
    public class TableColumn
    {
        public string Key { get; set; }
        public string Title { get; set; }
        public RenderFragment<TItem>? Template { get; set; }

        public TableColumn(string key, string title, RenderFragment<TItem>? template = null)
        {
            Key = key;
            Title = title;
            Template = template;
        }
    }

    [Parameter] public List<TItem> Items { get; set; } = new();
    [Parameter] public List<TableColumn> Columns { get; set; } = new();
}
